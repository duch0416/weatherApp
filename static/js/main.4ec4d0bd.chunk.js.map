{"version":3,"sources":["enums/queryKeys.enum.ts","enums/breakpoint.enum.ts","service/api.ts","service/services/forecast.requests.ts","components/loader/loader.styled.ts","assets/sun.svg","components/loader/loader.compoent.tsx","components/weatherCell/weatherCell.styled.ts","enums/storageKeys.enum.ts","enums/color.enum.ts","utils/celciusToFahrenheit.ts","components/weatherCell/weatherCell.component.tsx","components/forecast/forecast.styled.ts","components/forecast/forecast.components.tsx","hooks/useForecast.ts","hooks/useEffectAfterMount.ts","components/search/search.styled.ts","components/search/search.component.tsx","hooks/useLocalStorage.ts","components/switch/switch.styled.ts","app/app.styled.ts","components/switch/switch.component.tsx","globalStyle.ts","components/errorFallback/errorFallback.styled.ts","components/errorFallback/errorFallback.component.tsx","hooks/useCordinates.ts","utils/getGeolocation.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["QueryKeys","Breakpoint","api","axios","create","baseURL","headers","timeout","getForecast","woeid","get","LoaderIcon","styled","SVG","Loader","className","data-testid","src","sunImg","StorageKeys","Color","Wrapper","div","MobileS","DateText","p","Cell","Tablet","Row","RowWithMargin","Separator","TemperatureRow","TemperatureTitle","TemperatureValue","WeatherStateIcon","celciusToFahrenheit","temperature","WeatherCell","weather_state_abbr","weather_state_name","max_temp","min_temp","the_temp","wind_speed","air_pressure","applicable_date","temperatureUnit","id","Math","round","floor","LocationName","Forecast","location","cords","useQuery","lang","a","params","query","lattlong","lat","stringify","res","data","Error","result","refetchOnWindowFocus","enabled","staleTime","retry","useForecast","isLoading","status","error","title","consolidated_weather","slice","map","day","key","useEffectAfterMount","effect","deps","isFirstRun","useRef","useEffect","current","Input","input","Search","onSearch","currentValue","setCurrentValue","useDebounce","debauncedValue","String","value","onChange","e","target","placeholder","useLocalStorage","initialValue","useState","item","window","localStorage","getItem","JSON","parse","storedValue","setStoredValue","setItem","Container","button","Black","Ball","isActive","Value","span","Main","VeryLightGrey","InerfaceContainer","StyledSwitch","onToggle","setIsActive","onClick","GeolocationError","Overlay","BouncingLoader","GlobalStyle","createGlobalStyle","White","ResetButton","ErrorIcon","ErrorFallback","resetErrorBoundary","message","useCordinates","Cordinates","setCords","setStatus","errorMessage","setErrorMessage","getCords","position","coords","latitude","longitude","setError","succes","navigator","geolocation","getCurrentPosition","queryClient","QueryClient","defaultOptions","queries","App","setTemperatureUnit","Location","setLocation","QueryClientProvider","client","switchActive","FallbackComponent","onReset","resetKeys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ec4d0bd.chunk.js","sourcesContent":["export enum QueryKeys {\n  Forecast = \"forecast\",\n}\n","export enum Breakpoint {\n  MobileS = \"(min-width: 480px)\",\n  Tablet = \"(min-width: 768px)\",\n}","import axios from \"axios\";\n\nconst baseURL = \"https://www.metaweather.com/api\";\n\nexport const api = axios.create({\n  baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n },\n  timeout: 30 * 1000,\n});\n","import { AxiosResponse } from \"axios\";\nimport { stringify } from \"query-string\";\n\nimport { api } from \"../api\";\nimport {\n  GetForecastParams,\n  GetLocationParams,\n} from \"../models/getForecastParams\";\nimport { GetForecatRes } from \"../response/getForecast.response\";\nimport { GetLocationRes } from \"../response/getLocation.response\";\n\nexport const getLocation = (\n  params: GetLocationParams\n): Promise<AxiosResponse<GetLocationRes[]>> =>\n  api.get(`/location/search/?${stringify(params)}`);\n\nexport const getForecast = ({\n  woeid,\n}: GetForecastParams): Promise<AxiosResponse<GetForecatRes>> => api.get(`/location/${woeid}`);\n","import styled from 'styled-components';\nimport SVG from 'react-inlinesvg';\n\nexport const LoaderIcon = styled(SVG)`\n  @keyframes spin {\n    0% {\n      transform: rotate(0);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  animation: spin 1.5s infinite linear;\n  width: 40px;\n  height: 40px;\n`;","export default __webpack_public_path__ + \"static/media/sun.33fb29f6.svg\";","import { LoaderIcon } from \"./loader.styled\";\nimport sunImg from \"../../assets/sun.svg\";\nimport { LoaderProps } from \"./loader.types\";\n\nexport const Loader: React.FC<LoaderProps> = ({ className }) => (\n  <div data-testid=\"loader-container\" className={className}>\n    <LoaderIcon src={sunImg} />\n  </div>\n);\n","import styled from \"styled-components\";\nimport SVG from \"react-inlinesvg\";\n\nimport { Breakpoint } from \"../../enums/breakpoint.enum\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  @media ${Breakpoint.MobileS} {\n    max-width: 350px;\n  }\n`;\n\nexport const DateText = styled.p`\n  margin-bottom: 10px;\n`;\n\nexport const Cell = styled.div`\n  padding: 20px 40px;\n  border-radius: 10px;\n  box-sizing: border-box;\n  box-shadow: 0px 0px 8px rgba(0,0,0, 0.10);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 10px;\n\n  @media ${Breakpoint.Tablet} {\n    margin-right: 10px;\n  }\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const RowWithMargin = styled(Row)`\n  margin-top: 10px;\n`;\n\nexport const Separator = styled.p`\n  margin-left: 5px;\n  margin-right: 5px;\n`;\n\nexport const TemperatureRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-top: 15px;\n  margin-bottom: 20px;\n`;\n\nexport const TemperatureTitle = styled.p`\n  margin-top: 20px;\n`\n\nexport const TemperatureValue = styled.p`\n  margin-top: 10px;\n  font-size: 25px;\n`;\n\nexport const WeatherStateIcon = styled(SVG)`\n  width: 50px;\n  height: 50px;\n  margin-top: 10px;\n`;","export enum StorageKeys {\n  Location = \"location\",\n  Cordinates = \"cordinates\",\n}\n","export enum Color {\n  VeryLightGrey = \"#F6F6F6\",\n  Black = \"#000\",\n  White = \"#fff\",\n}\n","export const celciusToFahrenheit = (temperature: number): number => temperature + 273","import { WeatherCellProps } from \"./weatherCell.types\";\nimport {\n  Cell,\n  WeatherStateIcon,\n  TemperatureTitle,\n  TemperatureRow,\n  Separator,\n  TemperatureValue,\n  Row,\n  RowWithMargin,\n  Wrapper,\n  DateText,\n} from \"./weatherCell.styled\";\nimport { celciusToFahrenheit } from \"../../utils/celciusToFahrenheit\";\n\nexport const WeatherCell: React.FC<WeatherCellProps> = ({\n  weather_state_abbr,\n  weather_state_name,\n  max_temp,\n  min_temp,\n  the_temp,\n  wind_speed,\n  air_pressure,\n  applicable_date,\n  temperatureUnit,\n  id,\n}) => {\n  return (\n    <Wrapper key={id}>\n      <DateText>{applicable_date}</DateText>\n      <Cell>\n        <Row>\n          <p>{weather_state_name}</p>\n          <WeatherStateIcon\n            src={`https://www.metaweather.com/static/img/weather/${weather_state_abbr}.svg`}\n          />\n        </Row>\n        <TemperatureTitle>Temperature:</TemperatureTitle>\n        <TemperatureValue>\n          {Math.round(\n            temperatureUnit === \"fahrenheit\"\n              ? celciusToFahrenheit(the_temp)\n              : the_temp\n          )}\n        </TemperatureValue>\n        <TemperatureRow>\n          <p>\n            {Math.round(\n              temperatureUnit === \"fahrenheit\"\n                ? celciusToFahrenheit(max_temp)\n                : max_temp\n            )}\n          </p>\n          <Separator>/</Separator>\n          <p>\n            {Math.round(\n              temperatureUnit === \"fahrenheit\"\n                ? celciusToFahrenheit(min_temp)\n                : min_temp\n            )}\n          </p>\n        </TemperatureRow>\n        <RowWithMargin>\n          <p>Wind Speed:</p>\n          <p>{Math.floor(wind_speed)} mph</p>\n        </RowWithMargin>\n        <RowWithMargin>\n          <p>Air pressure:</p>\n          <p>{Math.floor(air_pressure)} hpa</p>\n        </RowWithMargin>\n      </Cell>\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nexport const LocationName = styled.p`\n  margin-top: 20px;\n`;\n","import React from \"react\";\n\nimport { useForecast } from \"../../hooks/useForecast\";\nimport { Loader } from \"../loader/loader.compoent\";\nimport { WeatherCell } from \"../weatherCell/weatherCell.component\";\nimport {\n  LocationName,\n  Wrapper,\n} from \"./forecast.styled\";\nimport { ForecastProps } from \"./forecast.types\";\n\nexport const Forecast: React.FC<ForecastProps> = ({\n  location,\n  temperatureUnit,\n  cords,\n}) => {\n  const { data, isLoading, status, error } = useForecast(\n    location,\n    cords,\n  );\n\n  if (status === \"error\") {\n    throw error;\n  }\n\n  return (\n    <>\n      <LocationName>{data && data?.data.title}</LocationName>\n      <Wrapper>\n        {!data?.data.consolidated_weather &&\n          !isLoading &&\n          status !== \"idle\" && <p>No data</p>}\n        {isLoading ? (\n          <Loader />\n        ) : (\n          data?.data.consolidated_weather\n            .slice(0, 3)\n            .map(\n              (day): JSX.Element => (\n                <WeatherCell\n                  {...day}\n                  key={day.id}\n                  temperatureUnit={temperatureUnit}\n                />\n              )\n            )\n        )}\n      </Wrapper>\n    </>\n  );\n};\n","import { useQuery } from \"react-query\";\n\nimport { QueryKeys } from \"../enums/queryKeys.enum\";\nimport {\n  getForecast,\n  getLocation,\n} from \"../service/services/forecast.requests\";\nimport { Cordinates } from \"../types/cordinates.types\";\n\nexport const useForecast = (location?: string, cords?: Cordinates) => {\n  const query = useQuery(\n    [QueryKeys.Forecast, location, cords?.lang],\n    async () => {\n      const res = await getLocation({\n        query: location,\n        lattlong: !location && cords?.lang ? `${cords.lat},${cords.lang}` : \"\",\n      });\n\n      if(!res.data[0]?.woeid) {\n        throw new Error('No data for provided location')\n      }\n\n      const result = await getForecast({ woeid: res.data[0].woeid });\n      return result;\n    },\n    {\n      refetchOnWindowFocus: false,\n      enabled: !!cords?.lat || !!location,\n      staleTime: 1000 * 60 * 60,\n      retry: 1,\n    }\n  );\n\n  return query;\n};\n","import { useEffect, useRef } from \"react\"\n\nexport const useEffectAfterMount = (effect: () => void,  deps: unknown[]) => {\n  const isFirstRun = useRef(true);\n  useEffect(() => {\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n\n    if (effect) return effect();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  outline: none;\n  border: none;\n  box-shadow: 0px 0px 8px rgba(0,0,0, 0.10);\n  padding: 10px 20px;\n  transition: 0.3s;\n\n  :hover {\n    box-shadow: 0px 2px 8px rgba(0,0,0, 0.15);\n  }\n`;","import { ChangeEvent, ChangeEventHandler } from \"react\";\nimport { useDebounce } from \"use-debounce\";\n\nimport { useEffectAfterMount } from \"../../hooks/useEffectAfterMount\";\nimport { SearchProps } from \"./search.types\";\nimport { Input } from \"./search.styled\";\n\nexport const Search: React.FC<SearchProps> = ({ onSearch, currentValue, setCurrentValue }) => {\n  const [debauncedValue] = useDebounce(currentValue, 800);\n\n  const handleChange: ChangeEventHandler = (\n    e: ChangeEvent<HTMLInputElement>\n  ) => {\n    setCurrentValue(e.target.value);\n  };\n\n  useEffectAfterMount(() => {\n    if (onSearch) {\n      onSearch(String(debauncedValue));\n    }\n  }, [debauncedValue]);\n  \n  return (\n    <div>\n      <Input value={currentValue} onChange={handleChange} placeholder=\"search\" />\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nimport { StorageKeys } from \"../enums/storageKeys.enum\";\n\nexport function useLocalStorage<T>(\n  key: StorageKeys,\n  initialValue?: T,\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const readValue = () => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  };\n\n  const [storedValue, setStoredValue] = useState<T>(readValue);\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\n  }, [initialValue, key, storedValue]);\n\n  return [storedValue, setStoredValue];\n}\n","import styled from \"styled-components\";\nimport { Color } from \"../../enums/color.enum\";\n\nexport const Container = styled.button`\n  width: 50px;\n  height: 20px;\n  border-radius: 10px;\n  position: relative;\n  border: 1px solid ${Color.Black};\n  outline: none;\n  cursor: pointer;\n  margin-bottom: 10px;\n`;\n\nexport const Ball = styled.div<{ isActive: boolean }>`\n  position: absolute;\n  top: 2px;\n  left: 2px;\n  width: 14px;\n  height: 14px;\n  background-color: ${Color.Black};\n  border-radius: 50%;\n  transition: 0.3s;\n  z-index: 2;\n\n  ${({isActive}) => isActive ? `left: ${48 - 16}px` : 'left: 2px'}\n`;\n\nexport const Value = styled.span`\n  font-weight: 700;\n  text-transform: uppercase;\n`;\n","import styled from \"styled-components\";\nimport SVG from 'react-inlinesvg';\n\nimport { Switch } from \"../components/switch/switch.component\";\nimport { Breakpoint } from \"../enums/breakpoint.enum\";\nimport { Color } from \"../enums/color.enum\";\n\nexport const Main = styled.div`\n  background-color: ${Color.VeryLightGrey};\n  width: 100%;\n  height: 100%;\n  min-height: 100vh;\n  padding: 20px;\n\n  @media ${Breakpoint.Tablet} {\n    padding: 40px;\n  }\n`;\n\nexport const InerfaceContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media ${Breakpoint.Tablet} {\n    flex-direction: row;\n  }\n`;\n\nexport const StyledSwitch = styled(Switch)`\n  margin-top: 10px;\n\n  @media ${Breakpoint.Tablet} {\n    margin-top: 0;\n    margin-left: 20px;\n  }\n`;\n\nexport const GeolocationError = styled.p`\n  margin-top: 20px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  width: fit-content;\n  \n  @media ${Breakpoint.MobileS} {\n    width: 350px;\n  }\n\n  @media ${Breakpoint.Tablet} {\n    width: 100%;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100vh;\n  background-color: rgba(50,50,50,0.15);\n  z-index: 5;\n`;\n\nexport const BouncingLoader = styled(SVG)`\n  @keyframes bounce {\n    0% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1.5)\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  animation: bounce 1.5s infinite linear;\n  width: 40px;\n  height: 40px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n`;\n","import { useState } from \"react\";\nimport { useEffectAfterMount } from \"../../hooks/useEffectAfterMount\";\nimport { Container, Ball, Value } from \"./switch.styled\";\nimport { SwitchProps } from \"./switch.types\";\n\nexport const Switch: React.FC<SwitchProps> = ({ className, onToggle }) => {\n  const [isActive, setIsActive] = useState<boolean>(false);\n\n  const toggleActivity = () => {\n    setIsActive(!isActive);\n  };\n\n  useEffectAfterMount(() => {\n    if (onToggle) {\n      onToggle(isActive);\n    }\n  }, [isActive]);\n\n  return (\n    <div className={className}>\n      <Container onClick={toggleActivity}>\n        <Ball isActive={isActive} />\n      </Container>\n      <p>temperature unit: <Value>{isActive ? \"fahrenheit\" : \"celsius\"}</Value></p>\n    </div>\n  );\n};\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Montserrat', sans-serif;\n  }\n`;\n","import styled from \"styled-components\";\nimport SVG from \"react-inlinesvg\";\n\nimport { Color } from \"../../enums/color.enum\";\n\nexport const Wrapper = styled.div`\n  max-width: 350px;\n  width: 100%;\n  border: 1px solid ${Color.Black};\n  background-color: ${Color.White};\n  padding: 40px;\n  margin-top: 20px;\n  border-radius: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const ResetButton = styled.button`\n  margin-top: 20px;\n  padding: 5px 20px;\n  outline: none;\n  border: 1px solid ${Color.Black};\n`;\n\nexport const ErrorIcon = styled(SVG)`\n  width: 50px;\n  height: 50px;\n  margin-bottom: 10px;\n`;\n","import { FallbackProps } from \"react-error-boundary\";\n\nimport { ResetButton, Wrapper, ErrorIcon } from './errorFallback.styled';\n\nexport const ErrorFallback: React.FC<FallbackProps> = ({\n  error,\n  resetErrorBoundary,\n}) => {\n  return (\n    <Wrapper>\n      <ErrorIcon src='https://www.metaweather.com/static/img/weather/t.svg'/>\n      <p>Upss....</p>\n      <p>{error.message}</p>\n      <ResetButton onClick={resetErrorBoundary}>try again</ResetButton>\n    </Wrapper>\n  );\n};","import { useEffect, useState } from \"react\";\nimport { StorageKeys } from \"../enums/storageKeys.enum\";\nimport { Cordinates } from \"../types/cordinates.types\";\nimport { Status } from \"../types/status.type\";\nimport { getGeolocation } from \"../utils/getGeolocation\";\nimport { useEffectAfterMount } from \"./useEffectAfterMount\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\nexport const useCordinates = (location: string) => {\n  const [cords, setCords] = useLocalStorage(StorageKeys.Cordinates ,{} as Cordinates)\n  const [status, setStatus] = useState<Status>('idle')\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const getCords = (position: GeolocationPosition) => {\n    setCords({ lat: position.coords.latitude, lang: position.coords.longitude });\n    setStatus('success');\n  };\n\n  const setError = () => {\n    setStatus('error');\n    setErrorMessage(\"We couldn't get your location, try searching\")\n  }\n\n  useEffectAfterMount(() => {\n    if(status !== \"idle\") {\n      setStatus('idle');\n      setErrorMessage('');\n    }\n  },[location])\n\n  useEffect(() => {\n    if(!!cords.lat || !!location) return\n    setStatus('loading')\n    getGeolocation(getCords, setError)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n\n  return { cords, status, errorMessage };\n}","export const getGeolocation = (succes: PositionCallback, error: PositionErrorCallback) => {\n  if (!navigator.geolocation) {\n    return;\n  }\n\n  navigator.geolocation.getCurrentPosition(succes, error);\n};\n","import React, { useState } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nimport { Forecast } from \"../components/forecast/forecast.components\";\nimport { Search } from \"../components/search/search.component\";\nimport { StorageKeys } from \"../enums/storageKeys.enum\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\nimport {\n  Container,\n  Main,\n  InerfaceContainer,\n  StyledSwitch,\n  GeolocationError,\n  BouncingLoader,\n  Overlay,\n} from \"./app.styled\";\nimport { GlobalStyle } from \"../globalStyle\";\nimport { TemperatureUnit } from \"../types/temperatureUnit.type\";\nimport { ErrorFallback } from \"../components/errorFallback/errorFallback.component\";\nimport { useCordinates } from \"../hooks/useCordinates\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n\nconst App: React.FC = () => {\n  const [temperatureUnit, setTemperatureUnit] = useState<TemperatureUnit>(\n    \"celsius\"\n  );\n  const [location, setLocation] = useLocalStorage<string>(StorageKeys.Location);\n  const [currentValue, setCurrentValue] = useState(location ?? \"\");\n  const { cords, status, errorMessage } = useCordinates(location);\n\n  const handleTemperatureUnitChange = (switchActive: boolean) => {\n    switchActive\n      ? setTemperatureUnit(\"fahrenheit\")\n      : setTemperatureUnit(\"celsius\");\n  };\n\n  const handleReset = () => {\n    setLocation(\"\");\n    setCurrentValue(\"\");\n  };\n\n  return (\n    <Main>\n      <GlobalStyle />\n      <QueryClientProvider client={queryClient}>\n        {status === \"loading\" && (\n          <Overlay data-testid=\"overlay\">\n            <BouncingLoader\n              src={\"https://www.metaweather.com/static/img/weather/t.svg\"}\n            />\n          </Overlay>\n        )}\n        <Container>\n          <InerfaceContainer>\n            <Search\n              onSearch={setLocation}\n              setCurrentValue={setCurrentValue}\n              currentValue={currentValue}\n            />\n            <StyledSwitch onToggle={handleTemperatureUnitChange} />\n          </InerfaceContainer>\n          {status === \"error\" && (\n            <GeolocationError>{errorMessage}</GeolocationError>\n          )}\n          <ErrorBoundary\n            FallbackComponent={ErrorFallback}\n            onReset={handleReset}\n            resetKeys={[location]}\n          >\n            <Forecast\n              location={location}\n              temperatureUnit={temperatureUnit}\n              cords={cords}\n            />\n          </ErrorBoundary>\n        </Container>\n      </QueryClientProvider>\n    </Main>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}